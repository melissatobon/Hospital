// <auto-generated />
using System;
using Hospital.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hospital.Web.Models.AntecedentAllergic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AntecedentsAllergics");
                });

            modelBuilder.Entity("Hospital.Web.Models.AntecedentFamiliar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AntecedentsFamily");
                });

            modelBuilder.Entity("Hospital.Web.Models.AntecedentStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AntecedentsStaffs");
                });

            modelBuilder.Entity("Hospital.Web.Models.AntecedentSurgical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AntecedentsSurgical");
                });

            modelBuilder.Entity("Hospital.Web.Models.ContactPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactPhone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ContactPatients");
                });

            modelBuilder.Entity("Hospital.Web.Models.Egress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Egresses");
                });

            modelBuilder.Entity("Hospital.Web.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("DateBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Document")
                        .HasColumnType("int");

                    b.Property<bool>("Medical")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Nurse")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Hospital.Web.Models.LaboratoryExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("LaboratoryExams");
                });

            modelBuilder.Entity("Hospital.Web.Models.MedicalNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("MedicalNotes");
                });

            modelBuilder.Entity("Hospital.Web.Models.NurseNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("NurseNotes");
                });

            modelBuilder.Entity("Hospital.Web.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Hospital.Web.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int?>("AntecedentAllergicId")
                        .HasColumnType("int");

                    b.Property<int?>("AntecedentFamiliarId")
                        .HasColumnType("int");

                    b.Property<int?>("AntecedentStaffId")
                        .HasColumnType("int");

                    b.Property<int?>("AntecedentSurgicalId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPatientId")
                        .HasColumnType("int");

                    b.Property<string>("DateBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Document")
                        .HasColumnType("int");

                    b.Property<int?>("EgressId")
                        .HasColumnType("int");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LaboratoryExamId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalNoteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NurseNoteId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("VitalSignId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AntecedentAllergicId");

                    b.HasIndex("AntecedentFamiliarId");

                    b.HasIndex("AntecedentStaffId");

                    b.HasIndex("AntecedentSurgicalId");

                    b.HasIndex("ContactPatientId");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.HasIndex("EgressId");

                    b.HasIndex("LaboratoryExamId");

                    b.HasIndex("MedicalNoteId");

                    b.HasIndex("NurseNoteId");

                    b.HasIndex("OrderId");

                    b.HasIndex("VitalSignId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hospital.Web.Models.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("Fc")
                        .HasColumnType("int");

                    b.Property<int>("Fr")
                        .HasColumnType("int");

                    b.Property<int>("Glucometry")
                        .HasColumnType("int");

                    b.Property<int>("Pad")
                        .HasColumnType("int");

                    b.Property<int>("Pas")
                        .HasColumnType("int");

                    b.Property<int>("Spo2")
                        .HasColumnType("int");

                    b.Property<float>("Temperature")
                        .HasMaxLength(50)
                        .HasColumnType("real");

                    b.Property<int>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Hospital.Web.Models.Employee", b =>
                {
                    b.HasOne("Hospital.Web.Models.User", null)
                        .WithMany("Employees")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Hospital.Web.Models.Patient", b =>
                {
                    b.HasOne("Hospital.Web.Models.AntecedentAllergic", null)
                        .WithMany("Patients")
                        .HasForeignKey("AntecedentAllergicId");

                    b.HasOne("Hospital.Web.Models.AntecedentFamiliar", null)
                        .WithMany("Patients")
                        .HasForeignKey("AntecedentFamiliarId");

                    b.HasOne("Hospital.Web.Models.AntecedentStaff", null)
                        .WithMany("Patients")
                        .HasForeignKey("AntecedentStaffId");

                    b.HasOne("Hospital.Web.Models.AntecedentSurgical", null)
                        .WithMany("Patients")
                        .HasForeignKey("AntecedentSurgicalId");

                    b.HasOne("Hospital.Web.Models.ContactPatient", null)
                        .WithMany("Patients")
                        .HasForeignKey("ContactPatientId");

                    b.HasOne("Hospital.Web.Models.Egress", null)
                        .WithMany("Patients")
                        .HasForeignKey("EgressId");

                    b.HasOne("Hospital.Web.Models.LaboratoryExam", null)
                        .WithMany("Patients")
                        .HasForeignKey("LaboratoryExamId");

                    b.HasOne("Hospital.Web.Models.MedicalNote", null)
                        .WithMany("Patients")
                        .HasForeignKey("MedicalNoteId");

                    b.HasOne("Hospital.Web.Models.NurseNote", null)
                        .WithMany("Patients")
                        .HasForeignKey("NurseNoteId");

                    b.HasOne("Hospital.Web.Models.Order", null)
                        .WithMany("Patients")
                        .HasForeignKey("OrderId");

                    b.HasOne("Hospital.Web.Models.VitalSign", null)
                        .WithMany("Patients")
                        .HasForeignKey("VitalSignId");
                });

            modelBuilder.Entity("Hospital.Web.Models.AntecedentAllergic", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.AntecedentFamiliar", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.AntecedentStaff", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.AntecedentSurgical", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.ContactPatient", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.Egress", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.LaboratoryExam", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.MedicalNote", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.NurseNote", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.Order", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Hospital.Web.Models.User", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Hospital.Web.Models.VitalSign", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
